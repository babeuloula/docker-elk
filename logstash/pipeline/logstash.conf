input {
    beats {
        port  => 5044
    }
}

filter {
    if "nginx" in [tags] and "access" in [tags] and "docker" in [tags] {
        # Only with docker
        grok {
            # 192.168.240.2 - [07/Jul/2020:08:00:34 +0000] "GET /api/ HTTP/1.1" 500 147597 "-" "Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/83.0.4103.116 Safari/537.36" 2.213 "192.168.240.1" 6ae1a5a3147b5010416b6426648a9b78
            match => [ "message" , "%{IPORHOST:client_ip} - \[%{HTTPDATE:timestamp}\] \"%{WORD:context.method} %{URIPATHPARAM:context.request_uri} HTTP/%{NUMBER:http_version}\" %{NUMBER:response} (?:%{NUMBER:bytes}|-) \"(?:%{URI:referrer}|-)\" \"%{GREEDYDATA:user_agent}\" %{BASE10NUM:request_duration} %{QS:x_forwarded_for} %{GREEDYDATA:request_id}" ]
        }

        date {
            match => [ "timestamp" , "dd/MMM/YYYY:HH:mm:ss Z" ]
            remove_field => [ "timestamp" ]
            target => "@timestamp"
        }

        mutate {
            convert => ["response", "integer"]
            convert => ["bytes", "integer"]
            convert => ["request_duration", "float"]
        }

        useragent {
            source => "user_agent"
            target => "agent"
        }
    } else if "php" in [tags] and "error" in [tags] and "docker" in [tags] {
        # Only with docker
        grok {
            # NOTICE: PHP message: 2020-07-07T09:59:43+02:00 [info] User Deprecated: The "sensio_framework_extra.routing.loader.annot_class" service is deprecated since version 5.2
            match => [ "message" , "NOTICE: PHP message: %{TIMESTAMP_ISO8601:timestamp} \[%{LOGLEVEL:level}\] %{GREEDYDATA:context.message}" ]
        }

        date {
            match => [ "timestamp" , "ISO8601", "yyyy-MM-dd'T'HH:mm:ss.SSSZ" ]
            remove_field => [ "timestamp" ]
            target => "@timestamp"
        }
    } else if "php" in [tags] and "access" in [tags] and "docker" in [tags] {
        # Only with docker
        grok {
            # 192.168.240.6 -  07/Jul/2020:09:59:01 +0200 "GET /path/subpath/file.php" 200
            match => [ "message" , "%{IPORHOST:client_ip} - (?:%{IPORHOST:remote_user}|) %{HTTPDATE:timestamp} \"%{WORD:context.method} %{URIPATHPARAM:context.request_uri}\" %{NUMBER:response}" ]
        }

        date {
            match => [ "timestamp" , "dd/MMM/YYYY:HH:mm:ss Z" ]
            remove_field => [ "timestamp" ]
            target => "@timestamp"
        }

        mutate {
            convert => ["response", "integer"]
        }
    } else if "php" in [tags] and "error" in [tags] and "docker" not in [tags] {
        grok {
            # [05-Jul-2020 02:00:01 UTC] PHP Warning:  require_once(../vendor/autoload.php): failed to open stream: No such file or directory in /var/www/html/file.php on line 4
            match => [ "message" , "\[%{GREEDYDATA:timestamp}\] PHP (?:Fatal |)%{LOGLEVEL:level}: %{GREEDYDATA:context.message}" ]
        }

        date {
            match => [ "timestamp" , "dd-MMM-YYYY HH:mm:ss ZZZ" ]
            remove_field => [ "timestamp" ]
            target => "@timestamp"
        }

        mutate {
            convert => ["response", "integer"]
        }
    } else if "apache" in [tags] and "access" in [tags] and "docker" not in [tags] {
        grok {
            # 216.245.221.86 - - [05/Jul/2020:03:41:35 +0200] "HEAD / HTTP/1.1" 302 - "http://api.website.fr/" "Mozilla/5.0+(compatible; UptimeRobot/2.0; http://www.uptimerobot.com/)"
            match => [ "message" , "%{IPORHOST:client_ip} -(?:%{IPORHOST:remote_user}| )- \[%{HTTPDATE:timestamp}\] \"%{WORD:context.method} %{URIPATHPARAM:context.request_uri} HTTP/%{NUMBER:http_version}\" %{NUMBER:response} - \"(?:%{URI:referrer}|-)\" \"%{GREEDYDATA:user_agent}\"" ]
        }

        date {
            match => [ "timestamp" , "dd/MMM/YYYY:HH:mm:ss Z" ]
            remove_field => [ "timestamp" ]
            target => "@timestamp"
        }

        mutate {
            convert => ["response", "integer"]
        }

        useragent {
            source => "user_agent"
            target => "agent"
        }
    } else if "php" in [tags] and "symfony" in [tags] {
        # With and without Docker
        json {
            source => "message"
        }
    }
}

output {
	elasticsearch {
		hosts => "elasticsearch:9200"
		user => "elastic"
		password => "changeme"
	}
}
